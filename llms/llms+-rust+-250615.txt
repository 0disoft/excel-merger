TITLE: Defining a Public Function in a Sub-module (Rust)
DESCRIPTION: This Rust code defines a public function `hello()` within a `foo.rs` file, intended to be part of a larger crate. The `pub` keyword makes the function accessible from other modules, and it simply prints "Hello, world!", illustrating basic function definition and module structure for inter-module communication.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/what-is-rustc.md#_snippet_4

LANGUAGE: rust
CODE:
```
pub fn hello() {
    println!("Hello, world!");
}
```

----------------------------------------

TITLE: Installing rustfmt on Stable Toolchain (Shell)
DESCRIPTION: This command adds the `rustfmt` component to your stable Rust toolchain using `rustup`. It makes the `rustfmt` binary and `cargo fmt` subcommand available for use with your stable Rust installations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
rustup component add rustfmt
```

----------------------------------------

TITLE: Defining Main Function for Rust Binary Crate
DESCRIPTION: This snippet demonstrates how to define the `main` function, which serves as the entry point for a Rust binary executable. It includes a basic `println!` macro call to output 'Hello world!'. This function is essential for a binary crate to compile and run successfully.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0601.md#_snippet_0

LANGUAGE: Rust
CODE:
```
fn main() {
    // Your program will start here.
    println!("Hello world!");
}
```

----------------------------------------

TITLE: Handling Optional Values in Rust Loop with If Let Statement
DESCRIPTION: This snippet demonstrates an alternative, more concise method for processing `Option` values within a loop. The `if let Some(x) = item` construct allows code to execute only when the `item` matches the `Some` variant, effectively filtering and unwrapping values without needing to explicitly handle the `None` case if no action is required for it.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0297.md#_snippet_2

LANGUAGE: Rust
CODE:
```
let xs : Vec<Option<i32>> = vec![Some(1), None];

for item in xs {
    if let Some(x) = item {
        // ...
    }
}
```

----------------------------------------

TITLE: Defining a Rust Function (Single Line Signature)
DESCRIPTION: Illustrates the standard single-line format for Rust function definitions, including optional keywords like `pub`, `unsafe`, and `extern`. It shows the placement of arguments and return types, emphasizing the opening brace on the same line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#_snippet_0

LANGUAGE: Rust
CODE:
```
[pub] [unsafe] [extern ["ABI"]] fn foo(arg1: i32, arg2: i32) -> i32 {
    ...
}
```

----------------------------------------

TITLE: Creating a New Rust Library Project
DESCRIPTION: This snippet demonstrates how to initialize a new Rust library project named 'docs' using Cargo's `cargo new --lib` command, followed by navigating into the newly created project directory.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ cargo new docs --lib
$ cd docs
```

----------------------------------------

TITLE: Fixing E0506 by Removing Outer Immutable Reference - Rust
DESCRIPTION: This solution resolves error E0506 by directly creating a mutable reference (`&mut fancy`) to the `FancyNum` instance. By making `fancy_ref` of type `&mut FancyNum`, it gains the necessary mutability to allow assignment to its `num` field without error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0389.md#_snippet_1

LANGUAGE: Rust
CODE:
```
struct FancyNum {
    num: u8,
}

fn main() {
    let mut fancy = FancyNum{ num: 5 };

    let fancy_ref = &mut fancy;
    // `fancy_ref` is now &mut FancyNum, rather than &(&mut FancyNum)

    fancy_ref.num = 6; // No error!

    println!("{}", fancy_ref.num);
}
```

----------------------------------------

TITLE: Installing Rust Compiler (Default Location) - Bash
DESCRIPTION: This command executes the `install.sh` script with superuser privileges to install the Rust compiler and associated tools to the default system location, typically `/usr/local`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/etc/installer/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
sudo ./install.sh
```

----------------------------------------

TITLE: Adding Trait Bound to Resolve E0277 in Generic Rust Function
DESCRIPTION: This snippet demonstrates how to fix the E0277 error in a generic function by adding a trait bound. By specifying `T: fmt::Debug`, the compiler knows that `T` will always implement `Debug`, allowing the `println!` macro to be used safely and resolving the compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0277.md#_snippet_3

LANGUAGE: Rust
CODE:
```
use std::fmt;

// Restrict the input type to types that implement Debug.
fn some_func<T: fmt::Debug>(foo: T) {
    println!("{:?}", foo);
}

fn main() {
    // Calling the method is still fine, as i32 implements Debug.
    some_func(5i32);

    // This would fail to compile now:
    // struct WithoutDebug;
    // some_func(WithoutDebug);
}
```

----------------------------------------

TITLE: Formatting Rust Project with cargo fmt (Shell)
DESCRIPTION: This command runs `rustfmt` on a cargo project in the current working directory. It automatically formats all binary and library targets of your crate, providing an easy way to ensure consistent formatting across your project.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
cargo fmt
```

----------------------------------------

TITLE: Demonstrating Character Literals and `println!` Formatting in Rust
DESCRIPTION: This `main` function showcases various character literals, including escape sequences (newline, tab, Unicode, hex) and a byte literal. It then provides extensive examples of the `println!` macro, demonstrating different formatting options like positional arguments, named arguments, width specifiers, alignment, sign, hexadecimal, zero-padding, and precision.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/test_data/highlight_strings.html#_snippet_5

LANGUAGE: Rust
CODE:
```
fn main() {
    let a = '\n';
    let a = '\t';
    let a = '\e'; // invalid escape
    let a = 'e';
    let a = ' ';
    let a = '\u{48}';
    let a = '\u{4823}';
    let a = '\x65';
    let a = '\x00';

    let a = b'\xFF';

    println!("Hello {{Hello}}");
    // from https://doc.rust-lang.org/std/fmt/index.html
    println!("Hello");                 // => "Hello"
    println!("Hello, {}!", "world");   // => "Hello, world!"
    println!("The number is {}", 1);   // => "The number is 1"
    println!("{:?}", (3, 4));          // => "(3, 4)"
    println!("{value}", value=4);      // => "4"
    println!("{} {}", 1, 2);           // => "1 2"
    println!("{:04}", 42);             // => "0042" with leading zerosV
    println!("{1} {} {0} {}", 1, 2);   // => "2 1 1 2"
    println!("{argument}", argument = "test");   // => "test"
    println!("{name} {}", 1, name = 2);          // => "2 1"
    println!("{a} {c} {b}", a="a", b='b', c=3);  // => "a 3 b"
    println!("{{{}}}", 2);                       // => "{2}"
    println!("Hello {:5}!", "x");
    println!("Hello {:1$}!", "x", 5);
    println!("Hello {1:0$}!", 5, "x");
    println!("Hello {:width$}!", "x", width = 5);
    println!("Hello {:<5}!", "x");
    println!("Hello {:-<5}!", "x");
    println!("Hello {:^5}!", "x");
    println!("Hello {:>5}!", "x");
    println!("Hello {:+}!", 5);
    println!("{:#x}!", 27);
    println!("Hello {:05}!", 5);
    println!("Hello {:05}!", -5);
    println!("{:#010x}!", 27);
    println!("Hello {0} is {1:.5}", "x", 0.01);
    println!("Hello {1} is {2:.0$}", 5, "x", 0.01);
    println!("Hello {0} is {2:.1$}", "x", 5, 0.01);
    println!("Hello {} is {:.*}",    "x", 5, 0.01);
    println!("Hello {} is {2:.*}",   "x", 5, 0.01);
    println!("Hello {} is {number:.prec$}", "x", prec = 5, number = 0.01);
    println!("{}, `{name:.*}` has 3 fractional digits", "Hello", 3, name=1234.56);
    println!("{}, `{name:.*}` has 3 characters", "Hello", 3, name="1234.56");
    println!("{}, `{name:>8.*}` has 3 right-aligned characters", "Hello", 3, name="1234.56");

    let _ = "{}";
    let _ = "{{}}";

    println!("Hello {{}}");
}
```

----------------------------------------

TITLE: Rust E0277: Trait Not Satisfied (Compile Fail)
DESCRIPTION: This Rust code example illustrates the E0277 error where a type (`i32`) is used in a context expecting a trait (`Foo`) that it does not implement. The `some_func` expects a generic type `T` that implements `Foo`, but `main` passes an `i32` without `Foo` implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#_snippet_17

LANGUAGE: Rust
CODE:
```
// here we declare the Foo trait with a bar method
trait Foo {
    fn bar(&self);
}

// we now declare a function which takes an object implementing the Foo trait
fn some_func<T: Foo>(foo: T) {
    foo.bar();
}

fn main() {
    // we now call the method with the i32 type, which doesn't implement
    // the Foo trait
    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied
}
```

----------------------------------------

TITLE: Fixing Rust E0502: Sequential Mutable and Immutable Borrows
DESCRIPTION: This Rust code snippet provides the corrected approach to resolve the E0502 error. By performing the mutable borrow (`bar(a);`) before the immutable borrow (`let y = &a;`), it ensures that only one type of borrow is active at a time, adhering to Rust's ownership and borrowing rules. This sequential access prevents conflicting references.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0502.md#_snippet_1

LANGUAGE: Rust
CODE:
```
fn bar(x: &mut i32) {}
fn foo(a: &mut i32) {
    bar(a);
    let y = &a; // ok!
    println!("{}", y);
}
```

----------------------------------------

TITLE: Defining a Basic Hello World Program (Rust)
DESCRIPTION: This Rust code defines a simple `main` function, which serves as the entry point for an executable program. Inside `main`, the `println!` macro is used to print the string "Hello, world!" to the standard output, illustrating fundamental Rust syntax for console output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/what-is-rustc.md#_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    println!("Hello, world!");
}
```

----------------------------------------

TITLE: Defining an Immutable Instance Method - Rust
DESCRIPTION: This Rust snippet illustrates the signature for an instance method named `provided`. The `&self` parameter signifies that the method takes an immutable reference to the instance it is called on, allowing read-only access to the instance's data without consuming or modifying it. This is a common pattern for getter methods or operations that do not alter the state of the object.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/rustdoc/extern/extern-default-method.no_href_on_anchor.html#_snippet_0

LANGUAGE: Rust
CODE:
```
provided(&self)
```

----------------------------------------

TITLE: Creating and Switching to a New Feature Branch
DESCRIPTION: This command creates a new branch named 'issue-12345-fix' and immediately switches your working directory to this new branch. This is a standard practice for isolating changes related to a specific feature or bug fix.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_4

LANGUAGE: Console
CODE:
```
git checkout -b issue-12345-fix
```

----------------------------------------

TITLE: Correcting Rust Lifetime Error E0491 with Lifetime Bounds
DESCRIPTION: This Rust code snippet provides the corrected solution for the E0491 lifetime error. By adding the lifetime bound 'b: 'a to the impl block, it explicitly tells the compiler that lifetime 'b must outlive or be equal to lifetime 'a. This ensures that the &'a Foo<'b> reference always points to valid data, resolving the compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0491.md#_snippet_1

LANGUAGE: Rust
CODE:
```
struct Foo<'a> {
    x: fn(&'a i32),
}

trait Trait<'a, 'b> {
    type Out;
}

impl<'a, 'b: 'a> Trait<'a, 'b> for usize { // we added the lifetime enforcement
    type Out = &'a Foo<'b>; // it now works!
}
```

----------------------------------------

TITLE: Rust Closure Formatting Examples
DESCRIPTION: Illustrates various Rust closure syntax and formatting rules. Shows examples of simple single-line closures, multi-line closures with explicit types and return types, closures returning struct literals, closures with control flow, and `unsafe` closures, demonstrating spacing rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#_snippet_3

LANGUAGE: Rust
CODE:
```
|arg1, arg2| expr

move |arg1: i32, arg2: i32| -> i32 {
    expr1;
    expr2
}

|| Foo {
    field1,
    field2: 0,
}

|| {
    if true {
        blah
    } else {
        boo
    }
}

|x| unsafe {
    expr
}
```

----------------------------------------

TITLE: Using Early Returns for Option Handling in Rust
DESCRIPTION: Shows the preferred way to handle `Option` types using early returns. This pattern reduces cognitive load and simplifies control flow, especially when a condition leads to an immediate `None` result, making the main logic clearer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#_snippet_29

LANGUAGE: Rust
CODE:
```
// GOOD
fn foo() -> Option<Bar> {
    if !condition() {
        return None;
    }

    Some(...)
}
```

----------------------------------------

TITLE: Using `break` with a value in a `loop` expression (Correct)
DESCRIPTION: Illustrates the correct usage of a `break` statement with a return value within a `loop` expression. This pattern allows the `loop` to evaluate to the value provided by `break`.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0571.md#_snippet_1

LANGUAGE: Rust
CODE:
```
# let mut i = 1;
# fn satisfied(n: usize) -> bool { n % 23 == 0 }
let result = loop { // This is now a "loop" loop.
    if satisfied(i) {
        break 2 * i; // ok!
    }
    i += 1;
};
```

----------------------------------------

TITLE: Correct `await` Usage Within `async` Functions and Blocks in Rust
DESCRIPTION: This snippet illustrates the correct usage of the `await` keyword within Rust. It shows `await` being used inside an `async` function (`foo`) and an `async` block (`bar`), which are the required contexts for suspending computation until a future completes.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0728.md#_snippet_1

LANGUAGE: Rust
CODE:
```
# use std::pin::Pin;
# use std::future::Future;
# use std::task::{Context, Poll};
#
# struct WakeOnceThenComplete(bool);
#
# fn wake_and_yield_once() -> WakeOnceThenComplete {
#     WakeOnceThenComplete(false)
# }
#
# impl Future for WakeOnceThenComplete {
#     type Output = ();
#     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {
#         if self.0 {
#             Poll::Ready(())
#         } else {
#             cx.waker().wake_by_ref();
#             self.0 = true;
#             Poll::Pending
#         }
#     }
# }
#
async fn foo() {
    wake_and_yield_once().await // `await` is used within `async` function
}

fn bar(x: u8) -> impl Future<Output = u8> {
    async move {
        wake_and_yield_once().await; // `await` is used within `async` block
        x
    }
}
```

----------------------------------------

TITLE: Checking Git Repository Status
DESCRIPTION: This command displays the state of the working directory and the staging area. It shows which changes have been staged, which haven't, and which files aren't being tracked by Git.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_7

LANGUAGE: Console
CODE:
```
git status
```

----------------------------------------

TITLE: Correct `main` Function Declaration in Rust
DESCRIPTION: This snippet illustrates the correct and idiomatic way to declare the `main` function in Rust. The `main` function should not take any arguments directly. For command-line arguments, `std::env::args` should be used, and for custom exit codes, `std::process::exit` is recommended.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0580.md#_snippet_1

LANGUAGE: Rust
CODE:
```
fn main() {
    // your code
}
```

----------------------------------------

TITLE: Defining a Rust Enum
DESCRIPTION: This Rust code defines an enum named `Foo` with a single variant `Bar`. It derives `Debug`, `PartialEq`, and `Clone` traits, allowing for easy debugging, comparison, and cloning of enum instances. The `///` comments provide documentation for the enum and its variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_errors/src/markdown/tests/input.md#_snippet_0

LANGUAGE: Rust
CODE:
```
/// A rust enum
#[derive(Debug, PartialEq, Clone)]
enum Foo {
    /// Start of line
    Bar
}
```

----------------------------------------

TITLE: Basic `let` Statement Formatting in Rust
DESCRIPTION: Illustrates the fundamental formatting rules for `let` statements in Rust, including spacing around type annotations and assignments, and the absence of space before the semicolon. Shows various forms of `let` declarations: with type and expression, without type or expression, with only type, and with only expression.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#_snippet_0

LANGUAGE: Rust
CODE:
```
// A comment.
let pattern: Type = expr;

let pattern;
let pattern: Type;
let pattern = expr;
```

----------------------------------------

TITLE: Fixing Immutable Variable Reassignment with `mut` in Rust
DESCRIPTION: This snippet demonstrates the correct way to allow reassignment of a variable in Rust by declaring it as mutable using the `mut` keyword. This resolves the E0384 error, enabling the variable `x` to be updated after its initial declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0384.md#_snippet_1

LANGUAGE: Rust
CODE:
```
fn main() {
    let mut x = 3;
    x = 5;
}
```

----------------------------------------

TITLE: Tracking Initialization and Moves in Rust
DESCRIPTION: This Rust example demonstrates how the borrow checker tracks the initialization status of a variable. A variable becomes initialized upon assignment and uninitialized after being moved, such as when passed to `std::mem::drop`. Attempting to use an uninitialized variable results in a compile-time error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/moves_and_initialization.md#_snippet_0

LANGUAGE: Rust
CODE:
```
fn foo() {
    let a: Vec<u32>;
    
    // a is not initialized yet
    
    a = vec![22];
    
    // a is initialized here
    
    std::mem::drop(a); // a is moved here
    
    // a is no longer initialized here

    let l = a.len(); //~ ERROR
}
```

----------------------------------------

TITLE: Initiating Interactive Rebase with Correct Upstream Branch - Git
DESCRIPTION: Shows how to start an interactive rebase against the correct 'upstream/master' branch, allowing for proper history rewriting and avoiding rebasing over unintended commits. This ensures a clean and accurate commit history.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_22

LANGUAGE: bash
CODE:
```
git rebase -i upstream/master
```

----------------------------------------

TITLE: Creating a New Rust Project with Cargo (Shell)
DESCRIPTION: This command initializes a new Rust project named `hello_fuchsia` using `cargo`, Rust's build system and package manager. It sets up the basic directory structure and `Cargo.toml` file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#_snippet_1

LANGUAGE: Shell
CODE:
```
cargo new hello_fuchsia
```

----------------------------------------

TITLE: Demonstrating String Creation and Reassignment in Rust
DESCRIPTION: This snippet illustrates how to declare string literals and convert them to `String` objects in Rust. It also shows variable shadowing, where `x` is reassigned to a new value, demonstrating Rust's immutability by default and how new bindings can reuse variable names.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/test_data/highlight_rainbow.html#_snippet_0

LANGUAGE: Rust
CODE:
```
fn main() {
    let hello = "hello";
    let x = hello.to_string();
    let y = hello.to_string();

    let x = "other color please!";
    let y = x.to_string();
}
```

----------------------------------------

TITLE: Implementing a Trait for a Struct in Rust
DESCRIPTION: This `impl` block implements the `t` trait for the `foo` struct. It provides concrete implementations for the functions defined in the `t` trait, demonstrating how a struct can fulfill the contract of a trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html#_snippet_4

LANGUAGE: Rust
CODE:
```
impl t for foo {
    pub fn is_static() {}
    pub fn is_not_static(&self) {}
}
```

----------------------------------------

TITLE: Declaring Dependencies in Cargo.toml (TOML)
DESCRIPTION: This snippet illustrates two ways to declare dependencies in `Cargo.toml`. The first shows an inline table for a dependency that fits on a single line. The second demonstrates how to declare a dependency as a separate table section when its definition is too long to fit inline, improving readability for complex dependency configurations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/cargo.md#_snippet_1

LANGUAGE: TOML
CODE:
```
[dependencies]
crate1 = { path = "crate1", version = "1.2.3" }

[dependencies.extremely_long_crate_name_goes_here]
path = "extremely_long_path_name_goes_right_here"
version = "4.5.6"
```

----------------------------------------

TITLE: Creating a New Git Branch - Shell
DESCRIPTION: This command creates a new branch named `my-branch` and immediately switches to it. This is a common practice for feature development or bug fixes to isolate changes from the main codebase.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/portable-simd/CONTRIBUTING.md#_snippet_1

LANGUAGE: Shell
CODE:
```
git checkout -b my-branch
```

----------------------------------------

TITLE: Illustrating Rust E0502: Conflicting Mutable and Immutable Borrows
DESCRIPTION: This Rust code snippet demonstrates the E0502 compiler error. It shows how attempting to borrow a variable (`a`) immutably (`let y = &a;`) and then mutably (`bar(a);`) within the same scope without releasing the first borrow leads to a compilation failure. The error highlights Rust's strict borrowing rules to prevent data races.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0502.md#_snippet_0

LANGUAGE: Rust
CODE:
```
fn bar(x: &mut i32) {}
fn foo(a: &mut i32) {
    let y = &a; // a is borrowed as immutable.
    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed
            //        as immutable
    println!("{}", y);
}
```

----------------------------------------

TITLE: Defining Trait and Implementing for a Struct in Rust
DESCRIPTION: This example illustrates the definition of a trait with a default method implementation and its subsequent implementation for a struct. This code sets the stage for understanding how Rust symbols encode paths to trait definitions, especially when a trait method is called via an implementing type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#_snippet_11

LANGUAGE: Rust
CODE:
```
trait Trait {
    fn example() {}
}
struct Example;
impl Trait for Example {}
```

----------------------------------------

TITLE: Correct Usage of Generics for Iterator Parameters in Rust
DESCRIPTION: This snippet provides the correct and idiomatic way to achieve similar functionality to `impl Trait` in path parameters by using a generic type parameter `T` constrained by the `Iterator` trait. The function `some_fn` accepts any type `T` that implements `Iterator`, allowing for flexible and type-safe function definitions. It correctly returns the item type of the generic iterator.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0667.md#_snippet_1

LANGUAGE: Rust
CODE:
```
fn some_fn<T: Iterator>(mut x: T) -> T::Item { // ok!
    x.next().unwrap()
}
```

----------------------------------------

TITLE: Incorrect Trait Object Definition (Rust 2021 Error)
DESCRIPTION: This Rust snippet demonstrates the incorrect way to define a trait object in Rust 2021 edition. Omitting the `dyn` keyword (e.g., `Box<Foo>`) leads to a compile-time error (E0782) because it's ambiguous whether `Foo` refers to a trait or a concrete type. This syntax was allowed in editions prior to 2021.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0782.md#_snippet_0

LANGUAGE: Rust
CODE:
```
trait Foo {}
fn test(arg: Box<Foo>) {} // error!
```

----------------------------------------

TITLE: Illustrating Rust E0524: Concurrent Mutable Borrow in Closures
DESCRIPTION: This snippet demonstrates the Rust compiler error E0524, which arises when two closures attempt to capture the same mutable reference (`&mut isize`) simultaneously. The `set` function modifies the `isize` value, and `c1` and `c2` both try to borrow `x` mutably, leading to a compile-time error due to Rust's borrowing rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0524.md#_snippet_0

LANGUAGE: Rust
CODE:
```
fn set(x: &mut isize) {
    *x += 4;
}

fn dragoooon(x: &mut isize) {
    let mut c1 = || set(x);
    let mut c2 = || set(x); // error!

    c2();
    c1();
}
```

----------------------------------------

TITLE: Rust Solution: Using Reference in Closure for Borrowed Data
DESCRIPTION: This solution demonstrates how to resolve the 'cannot move' error by using a reference (`fancy_ref`) inside the closure instead of attempting to move the original value (`fancy_num`). This allows the original value to remain borrowed and accessible after the closure's execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0504.md#_snippet_1

LANGUAGE: Rust
CODE:
```
struct FancyNum {
    num: u8,
}

fn main() {
    let fancy_num = FancyNum { num: 5 };
    let fancy_ref = &fancy_num;

    let x = move || {
        // fancy_ref is usable here because it doesn't move `fancy_num`
        println!("child function: {}", fancy_ref.num);
    };

    x();

    println!("main function: {}", fancy_num.num);
}
```

----------------------------------------

TITLE: Implementing Trait to Resolve E0277 Error in Rust
DESCRIPTION: This snippet provides the fix for the E0277 error by implementing the `Foo` trait for the `i32` type. This allows `some_func` to be called with an `i32` value, as `i32` now satisfies the `Foo` trait bound, resolving the compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0277.md#_snippet_1

LANGUAGE: Rust
CODE:
```
trait Foo {
    fn bar(&self);
}

// we implement the trait on the i32 type
impl Foo for i32 {
    fn bar(&self) {}
}

fn some_func<T: Foo>(foo: T) {
    foo.bar(); // we can now use this method since i32 implements the
               // Foo trait
}

fn main() {
    some_func(5i32); // ok!
}
```

----------------------------------------

TITLE: Declaring External Crates, Using Modules, and Defining Sub-Modules in Rust
DESCRIPTION: This snippet demonstrates how to declare an external crate dependency, import items from the current crate or its dependencies using `use` statements, and define a new sub-module. The `use super::*` within the module imports all public items from the parent module.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/test_data/highlight_keywords_2018.html#_snippet_0

LANGUAGE: Rust
CODE:
```
extern crate self;

use crate;
use self;
mod __ {
    use super::*;
}
```

----------------------------------------

TITLE: Resolving E0524 with Rc and RefCell for Shared Mutable Access
DESCRIPTION: This solution demonstrates how to allow multiple closures to access a shared mutable variable by using `Rc<RefCell<T>>`. `Rc` provides shared ownership, while `RefCell` enables interior mutability, allowing mutable borrows at runtime. This pattern circumvents the compile-time borrowing error by managing mutable access dynamically.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0524.md#_snippet_1

LANGUAGE: Rust
CODE:
```
use std::rc::Rc;
use std::cell::RefCell;

fn set(x: &mut isize) {
    *x += 4;
}

fn dragoooon(x: &mut isize) {
    let x = Rc::new(RefCell::new(x));
    let y = Rc::clone(&x);
    let mut c1 = || { let mut x2 = x.borrow_mut(); set(&mut x2); };
    let mut c2 = || { let mut x2 = y.borrow_mut(); set(&mut x2); }; // ok!

    c2();
    c1();
}
```

----------------------------------------

TITLE: Returning Dangling Iterator from Local Vector (Rust)
DESCRIPTION: This example illustrates the E0515 error when attempting to return an iterator (`std::slice::Iter`) that references data from a locally created `Vec`. The `Vec` `v` is dropped at the end of the function, invalidating the iterator's references to its elements. This results in a dangling iterator.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0515.md#_snippet_1

LANGUAGE: Rust
CODE:
```
use std::slice::Iter;
fn get_dangling_iterator<'a>() -> Iter<'a, i32> {
    let v = vec![1, 2, 3];
    v.iter()
}
```

----------------------------------------

TITLE: Enforcing Function Preconditions with Types in Rust
DESCRIPTION: Illustrates how to enforce function preconditions by using specific types (e.g., `Walrus`) instead of `Option<Walrus>` and checking for `None` inside the function. This makes control flow explicit at the call site and leverages Rust's type system for correctness.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#_snippet_2

LANGUAGE: Rust
CODE:
```
// GOOD
fn frobnicate(walrus: Walrus) {
    ...
}

// BAD
fn frobnicate(walrus: Option<Walrus>) {
    let walrus = match walrus {
        Some(it) => it,
        None => return,
    };
    ...
}
```

----------------------------------------

TITLE: Documenting `std::env::args()` Function in Rust (Example)
DESCRIPTION: This snippet provides an example of comprehensive documentation for the `std::env::args()` function from the Rust standard library. It details the function's purpose, behavior across different operating systems, security considerations, and potential panics, advising on alternatives like `args_os` for non-Unicode arguments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/how-to-write-documentation.md#_snippet_2

LANGUAGE: markdown
CODE:
```
Returns the arguments which this program was started with (normally passed
via the command line).

The first element is traditionally the path of the executable, but it can be
set to arbitrary text, and may not even exist. This means this property should
not be relied upon for security purposes.

On Unix systems shell usually expands unquoted arguments with glob patterns
(such as `*` and `?`). On Windows this is not done, and such arguments are
passed as-is.

# Panics

The returned iterator will panic during iteration if any argument to the
process is not valid unicode. If this is not desired,
use the [`args_os`] function instead.
```

----------------------------------------

TITLE: Borrowing Values with References in Rust
DESCRIPTION: This example demonstrates how to use immutable references (`&`) to allow a function to 'borrow' a value without taking ownership. This prevents the value from being moved, allowing the original variable (`s1`) to remain valid after the function call.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0382.md#_snippet_1

LANGUAGE: Rust
CODE:
```
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}
```

----------------------------------------

TITLE: Adding rust-analyzer Component via rustup
DESCRIPTION: This command uses `rustup`, the official Rust toolchain installer, to add `rust-analyzer` as a component to your existing Rust installation. This is the recommended and simplest way to install `rust-analyzer` if `rustup` is already in use.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/rust_analyzer_binary.md#_snippet_2

LANGUAGE: Shell
CODE:
```
rustup component add rust-analyzer
```

----------------------------------------

TITLE: Adding a Getter Method for Private Field in Rust
DESCRIPTION: This snippet provides an alternative solution to access a private field (`x`) by implementing a public getter method (`get_x`) within the struct's `impl` block. This allows controlled access to the private data without exposing the field directly.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0616.md#_snippet_2

LANGUAGE: Rust
CODE:
```
mod some_module {
    pub struct Foo {
        x: u32, // So `x` is still private in here.
    }

    impl Foo {
        pub fn new() -> Foo { Foo { x: 0 } }

        // We create the getter function here:
        pub fn get_x(&self) -> &u32 { &self.x }
    }
}

let f = some_module::Foo::new();
println!("{}", f.get_x()); // ok!
```

----------------------------------------

TITLE: Importing Standard Library Module - Rust
DESCRIPTION: Imports the `iter` module from the `core` library. This allows direct access to items within `iter` without needing to prefix them with `iter::`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html#_snippet_1

LANGUAGE: Rust
CODE:
```
use core::iter;
```

----------------------------------------

TITLE: Demonstrating Immutable Variable Reassignment Error in Rust
DESCRIPTION: This snippet illustrates the E0384 compile-time error in Rust, which occurs when an attempt is made to reassign a value to a variable declared as immutable. By default, Rust variables are immutable, leading to this error if `mut` is not used.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0384.md#_snippet_0

LANGUAGE: Rust
CODE:
```
fn main() {
    let x = 3;
    x = 5; // error, reassignment of immutable variable
}
```

----------------------------------------

TITLE: Defining a Basic Rust Function
DESCRIPTION: This snippet defines a simple Rust function named `blah` that takes no arguments and returns nothing. It serves as a basic example of function declaration syntax in Rust, demonstrating the `fn` keyword followed by the function name, empty parentheses for parameters, and curly braces for the function body.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/tests/writemode/target/modified.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
fn blah() {}
```

----------------------------------------

TITLE: Calling Unsafe Function Within Unsafe Block (Correct) - Rust
DESCRIPTION: This example demonstrates the correct and recommended way to invoke an `unsafe` function in Rust. By wrapping the call within an `unsafe` block, the compiler's safety checks are explicitly relaxed for that section, allowing the `unsafe` operation to proceed without error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0133.md#_snippet_1

LANGUAGE: Rust
CODE:
```
unsafe fn f() { return; }

fn main() {
    unsafe { f(); } 
}
```

----------------------------------------

TITLE: Demonstrating E0506 Error with Borrowed Value Assignment in Rust
DESCRIPTION: This snippet illustrates the E0506 error in Rust, which occurs when attempting to reassign a mutable variable (`fancy_num`) while it is still borrowed by a reference (`fancy_ref`). The assignment fails because it would invalidate the active reference, leading to a compile-time error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0506.md#_snippet_0

LANGUAGE: Rust
CODE:
```
struct FancyNum {
    num: u8,
}

let mut fancy_num = FancyNum { num: 5 };
let fancy_ref = &fancy_num;
fancy_num = FancyNum { num: 6 };
// error: cannot assign to `fancy_num` because it is borrowed

println!("Num: {}, Ref: {}", fancy_num.num, fancy_ref.num);
```

----------------------------------------

TITLE: Applying Pattern Usefulness Across Rust Constructs
DESCRIPTION: This Rust code demonstrates various contexts where the compiler performs pattern usefulness and exhaustiveness checking. It includes examples for `match` expressions (detecting unreachable branches and non-exhaustive matches), `if let` (detecting unreachable branches), `while let` (detecting infinite/dead loops), destructuring `let` statements, and destructuring function arguments, all of which leverage pattern analysis to ensure correctness and prevent common errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/pat-exhaustive-checking.md#_snippet_1

LANGUAGE: Rust
CODE:
```
// `match`
// Usefulness can detect unreachable branches and forbid non-exhaustive matches.
match foo() {
    Ok(x) => x,
    Err(_) => panic!(),
}

// `if let`
// Usefulness can detect unreachable branches.
if let Some(x) = foo() {
    // ...
}

// `while let`
// Usefulness can detect infinite loops and dead loops.
while let Some(x) = it.next() {
    // ...
}

// Destructuring `let`
// Usefulness can forbid non-exhaustive patterns.
let Foo::Bar(x, y) = foo();

// Destructuring function arguments
// Usefulness can forbid non-exhaustive patterns.
fn foo(Foo { x, y }: Foo) {
    // ...
}
```